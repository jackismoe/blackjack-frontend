[{"/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/index.js":"1","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/appReducer.js":"2","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/Game.jsx":"3","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/Nav.jsx":"4","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/Footer.jsx":"5","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/Login.jsx":"6","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/Signup.jsx":"7","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/actions/fetchPlayer.js":"8","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/LoadGame.jsx":"9","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/actions/buildDeck.js":"10","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/Menu.jsx":"11","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/actions/updateRecord.js":"12","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/actions/resetDealer.js":"13","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/actions/logout.js":"14"},{"size":1110,"mtime":1612026346687,"results":"15","hashOfConfig":"16"},{"size":1473,"mtime":1612025714547,"results":"17","hashOfConfig":"16"},{"size":10557,"mtime":1612024638752,"results":"18","hashOfConfig":"16"},{"size":880,"mtime":1612024276171,"results":"19","hashOfConfig":"16"},{"size":222,"mtime":1611685506439,"results":"20","hashOfConfig":"16"},{"size":1525,"mtime":1612023088857,"results":"21","hashOfConfig":"16"},{"size":1611,"mtime":1612021802884,"results":"22","hashOfConfig":"16"},{"size":331,"mtime":1611945179382,"results":"23","hashOfConfig":"16"},{"size":828,"mtime":1611424376212,"results":"24","hashOfConfig":"16"},{"size":263,"mtime":1611975694047,"results":"25","hashOfConfig":"16"},{"size":643,"mtime":1612026453093,"results":"26","hashOfConfig":"16"},{"size":474,"mtime":1611945493615,"results":"27","hashOfConfig":"16"},{"size":389,"mtime":1611948654050,"results":"28","hashOfConfig":"16"},{"size":370,"mtime":1612026110159,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9y5jjq",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/index.js",[],"/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/appReducer.js",[],"/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/Game.jsx",["62","63","64","65","66","67","68"],"import React from 'react'\nimport {connect} from 'react-redux'\nimport updateRecord from '../actions/updateRecord'\nimport resetDealer from '../actions/resetDealer'\n\n\nclass Game extends React.Component {\n\n  startGame = () => {\n    const spade = '♠'\n    const club = '♣'\n    const heart = '♥'\n    const diamond = '♦'\n    const playerSlotOne = document.querySelector('.playerCardOneStart')\n    const playerSlotTwo = document.querySelector('.playerCardTwoStart')\n    const dealerSlotOne = document.querySelector('.dealerCardOneStart')\n    const dealerSlotTwo = document.querySelector('.dealerCardTwoStart')\n    const playerCardsDOM = document.querySelector('.player .dealtCards')\n    const dealerCardsDOM = document.querySelector('.dealer .dealtCards')\n    const dealerHand = []\n    const playerHand = []\n\n    let sortedDeck\n    let cardsInDeck\n    let playerTotal = 0\n    let dealerTotal = 0\n\n    const sortDeck = () => {  \n      sortedDeck = this.props.deck.filter(card => card.dealt == false)\n      cardsInDeck = sortedDeck.length\n    }\n\n    const pickUpPlayerCards = () => {\n      const dealtCards = document.querySelectorAll('.player .dealt')\n      for (let card of dealtCards) {\n        card.remove()\n      }\n    }\n    const pickUpDealerCards = () => {\n      const dealtCards = document.querySelectorAll('.dealer .dealt')\n      for (let card of dealtCards) {\n        card.remove()\n      }\n    }\n\n    const resetDeck = (winner) => {\n      this.props.deck.map(card => card.dealt = false)\n      playerSlotOne.className = 'playerCardOneStart'\n      playerSlotOne.innerHTML = ''\n      playerSlotTwo.className = 'playerCardTwoStart'\n      playerSlotTwo.innerHTML = ''\n      dealerSlotOne.className = 'dealerCardOneStart'\n      dealerSlotOne.innerHTML = ''\n      dealerSlotTwo.className = 'dealerCardTwoStart'\n      dealerSlotTwo.innerHTML = ''\n\n      pickUpPlayerCards()\n      pickUpDealerCards()\n      document.querySelector('.deal').style.visibility = 'visible'\n      document.querySelector('.resetDealer').style.visibility = 'visible'\n\n      // send game data to backend for W/L column\n      this.props.updateRecord(this.props.player, winner)\n    }\n\n    const dealFirstTwo = (hand) => {\n      const index = Math.floor(Math.random() * cardsInDeck)\n      const card = sortedDeck.find((card, idx) => idx == index)\n      card.dealt = true\n      sortDeck()\n      hand.push(card)\n\n      if (hand.length < 2) {\n        dealFirstTwo(hand)\n      }\n    }\n\n    const getCardSuitAndValue = (card) => {\n      let cardSuit\n      let cardValue\n\n      const cardDisplay = []\n\n      if (card.name.includes('spade')) {\n        cardSuit = spade\n      } else if ( card.name.includes('heart')) {\n        cardSuit = heart\n      } else if (card.name.includes('diamond')) {\n        cardSuit = diamond\n      } else if (card.name.includes('club')) {\n        cardSuit = club\n      }\n\n      if (card.name.includes('Jack')) {\n        cardValue = 'J'\n      } else if (card.name.includes('Queen')) {\n        cardValue = 'Q'\n      } else if (card.name.includes('King')) {\n        cardValue = 'K'\n      } else if (card.name.includes('Ace')) {\n        cardValue = 'A'\n      } else {\n        cardValue = card.value\n      }\n      cardDisplay.push(cardSuit)\n      cardDisplay.push(cardValue)\n\n      return cardDisplay\n    }\n\n    const showPlayerCards = (hand) => {\n\n      const cardOne = hand[0]\n      const cardTwo = hand[1]   \n      \n      const cardOneValues = getCardSuitAndValue(cardOne)\n      const cardTwoValues = getCardSuitAndValue(cardTwo)\n\n      const cardOneSuit = cardOneValues[0]\n      const cardOneValue = cardOneValues[1]\n\n      const cardTwoSuit = cardTwoValues[0]\n      const cardTwoValue = cardTwoValues[1]\n\n      playerSlotOne.className = 'playerCardOne'\n      playerSlotTwo.className = 'playerCardTwo'\n      playerSlotOne.innerHTML = `<h1 class=${cardOneSuit}>${cardOneSuit}</h1>${cardOneValue}</h1>`\n      playerSlotTwo.innerHTML = `<h1 class=${cardTwoSuit}>${cardTwoSuit}</h1>${cardTwoValue}</h1>`\n    }\n\n    const showTertiaryPlayerCards = (desired) => {\n      const handCopy = Array.from(desired)\n      handCopy.splice(0, 2)\n      pickUpPlayerCards()\n      for (let card of handCopy) {\n        const cardSuitAndValue = getCardSuitAndValue(card)\n        const cardDiv = document.createElement('div')\n        cardDiv.className = 'dealt'\n        cardDiv.innerHTML = `<h1 class=${cardSuitAndValue[0]}>${cardSuitAndValue[0]}</h1><h1>${cardSuitAndValue[1]}</h1>`\n        playerCardsDOM.appendChild(cardDiv)\n      }\n    }\n\n    const showTertiaryDealerCards = (desired) => {\n      const handCopy = Array.from(desired)\n      handCopy.splice(0, 2)\n      pickUpDealerCards()\n      for (let card of handCopy) {\n        const cardSuitAndValue = getCardSuitAndValue(card)\n        const cardDiv = document.createElement('div')\n        cardDiv.className = 'dealt'\n        cardDiv.innerHTML = `<h1 class=${cardSuitAndValue[0]}>${cardSuitAndValue[0]}</h1><h1>${cardSuitAndValue[1]}</h1>`\n        dealerCardsDOM.appendChild(cardDiv)\n      }\n    }\n\n    const showFirstDealerCard = (hand) => {\n      const cardOne = hand[0]\n      \n      const cardOneValues = getCardSuitAndValue(cardOne)\n\n      const cardOneSuit = cardOneValues[0]\n      const cardOneValue = cardOneValues[1]\n\n      dealerSlotOne.className = 'dealerCardOne'\n      dealerSlotOne.innerHTML = `<h1 class=${cardOneSuit}>${cardOneSuit}</h1>${cardOneValue}</h1>`\n    }\n\n    const showSecondDealerCard = (hand) => {\n      const cardTwo = hand[1]\n      \n      const cardTwoValues = getCardSuitAndValue(cardTwo)\n\n      const cardTwoSuit = cardTwoValues[0]\n      const cardTwoValue = cardTwoValues[1]\n\n      dealerSlotTwo.className = 'dealerCardTwo'\n      dealerSlotTwo.innerHTML = `<h1 class=${cardTwoSuit}>${cardTwoSuit}</h1>${cardTwoValue}</h1>`\n    }\n\n    const dealOne = (hand) => {\n      const index = Math.floor(Math.random() * cardsInDeck)\n      const card = sortedDeck.find((card, idx) => idx == index)\n      card.dealt = true\n      sortDeck()\n      hand.push(card)\n    }\n\n    const getTotal = (hand) => {\n      let workingTotal = 0\n      for (let card of hand) {\n        workingTotal += card.value\n        console.log('value ' + card.value)\n        console.log('total ' + workingTotal)\n      }\n      return workingTotal\n    }\n\n    const playerTurn = () => {\n\n      if (playerTotal > 21) {\n          alert(`you've busted`)\n          showSecondDealerCard(dealerHand)\n          seeWhoWon()\n      } else {\n        const playerHit = window.confirm(`your total right now is ${playerTotal}. Would you like to hit?`)\n        if (playerHit) {\n          dealOne(playerHand)\n          playerTotal = getTotal(playerHand)\n\n          showTertiaryPlayerCards(playerHand)\n          \n          setTimeout(() => {\n            playerTurn()\n          }, 500)\n        } else {\n          dealersTurn(dealerTotal, dealerHand)\n        }\n      }\n    }\n    const dealersTurn = (total, hand) => {\n\n      if (dealerTotal > 21) {\n          alert(`dealer has busted`)\n          showSecondDealerCard(dealerHand)\n          seeWhoWon()\n      } else {\n        if (total < 17) {\n          dealOne(hand)\n          dealerTotal = getTotal(dealerHand)\n          showTertiaryDealerCards(dealerHand)\n          setTimeout(dealersTurn(dealerTotal, hand), 1500)\n        } else if (total > 21) {\n          showSecondDealerCard(dealerHand)\n          seeWhoWon()\n          setTimeout(alert('dealer has busted'), 900)\n        } else {\n          showSecondDealerCard(dealerHand)\n          seeWhoWon()\n        }\n      }\n    }\n    const seeWhoWon = () => {\n      let winner\n\n      if ((playerTotal > dealerTotal) && (playerTotal <= 21) || (dealerTotal > 21)) {\n        winner = this.props.playerName\n      } else if ((dealerTotal > playerTotal) && (dealerTotal <= 21) || (playerTotal > 21)) {\n        winner = 'dealer'\n      }\n      window.setTimeout(() => {\n        alert(`${this.props.playerName}'s total is ${playerTotal}.\\ndealertotal is ${dealerTotal}.\\n${winner} has won.`)\n      }, 500)\n      window.setTimeout(() => {\n        resetDeck(winner)\n      }, 1000)\n    }\n\n    document.querySelector('.deal').style.visibility = 'hidden'\n    document.querySelector('.resetDealer').style.visibility = 'hidden'\n\n    //shuffle and deal\n    sortDeck()\n    dealFirstTwo(playerHand)\n    dealFirstTwo(dealerHand)\n    playerTotal = getTotal(playerHand)\n    dealerTotal = getTotal(dealerHand)\n\n    //show cards on table\n    showPlayerCards(playerHand)\n    showFirstDealerCard(dealerHand)\n\n    //start game\n    window.setTimeout(() => {\n      playerTurn()\n    }, 700)\n  }\n\n  render() {\n    return (\n      <div className='game' onLoad={this.checkRefresh}>\n        <div className='player'>\n          {/* <div className='availableCash'><h1>${this.props.playerCash}</h1></div> */}\n          <div className='playerCardOneStart'>\n\n          </div>\n          <div className='playerCardTwoStart'>\n\n          </div>\n          <div className='dealtCards'>\n            \n          </div>\n          <div className='playerRecord'>\n            Wins: <h1>{this.props.playerWins}</h1>\n            Losses: <h1>{this.props.playerLosses}</h1>\n          </div>\n          <h1 className='playerName'>{this.props.playerName}</h1>\n        </div>\n        <div className='dealer'>\n          <button className='resetDealer' onClick={this.props.resetDealer}>Reset Dealer</button>\n          {/* <div className='availableCash'><h1>${this.props.dealerCash}</h1></div> */}\n          <div className='dealerCardOneStart'>\n\n          </div>\n          <div className='dealerCardTwoStart'>\n\n          </div>\n          <div className='dealtCards'>\n            \n          </div>\n          <div className='dealerRecord'>\n            Wins: <h1>{this.props.dealerWins}</h1>\n            Losses: <h1>{this.props.dealerLosses}</h1>\n          </div>\n          <h1 className='dealerName'>Dealer</h1>        \n        </div>\n\n        <button className='deal' onClick={() => this.startGame()}>Deal</button>\n      </div>\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    playerName: state.playerName,\n    player: state.player,\n    playerCash: state.playerCash,\n    playerWins: state.playerWins,\n    playerLosses: state.playerLosses,\n    dealerWins: state.dealerWins,\n    dealerLosses: state.dealerLosses,\n    dealerCash: state.dealerCash,\n    deck: state.deck\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateRecord: (player, winner) => dispatch(updateRecord(player, winner)),\n    resetDealer: () => dispatch(resetDealer()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)",["69","70"],"/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/Nav.jsx",["71","72"],"import React from 'react'\nimport { Sling as Hamburger } from 'hamburger-react'\n\nexport default class Nav extends React.Component {\n  static menuOpen = false\n  handleMenu = () => {\n    const menu = document.querySelector('.menu')\n    if (sessionStorage.userId) {\n      if (Nav.menuOpen == true) {\n        menu.style.visibility = 'hidden'\n        Nav.menuOpen = false\n      } else if (Nav.menuOpen == false) {\n        menu.style.visibility = 'visible'\n        Nav.menuOpen = true\n      }\n    }\n  }\n\n  static closeMenu = () => {\n    const menu = document.querySelector('.menu')\n    menu.style.visibility = 'hidden'\n  }\n  \n  render() {\n    return (\n      <div className='navBar'>\n        <div onClick={this.handleMenu} className='hamburger'><Hamburger/></div>\n        <div className='title'><h3>reactJack</h3></div>\n        <div className='userIcon'>•</div>\n      </div>\n    )\n  }\n}","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/Footer.jsx",[],"/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/Login.jsx",[],"/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/Signup.jsx",["73"],"import React from 'react'\nimport BASE_URL from '../index'\nimport {Link} from 'react-router-dom'\nimport Nav from './Nav'\n\nexport default class Login extends React.Component {\n\n  handleSubmit = event => {\n    event.preventDefault()\n    if (event.target[1].value == event.target[2].value) {\n      const createPlayer = (player) => {\n        fetch(`${BASE_URL}/users`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            player: player\n          })\n        })\n        .then(response => response.json())\n        .then(jsonResponse => {\n          // deal with player\n          sessionStorage.setItem('userId', jsonResponse.id)\n          sessionStorage.setItem('username', jsonResponse.username)\n          this.props.history.push('/loading')\n        })\n      }\n      const player = {\n        name: event.target[0].value,\n        password: event.target[1].value\n      }\n      createPlayer(player)\n    } else {\n      document.querySelector('.signup').reset()\n      alert('Check your inputs :)')\n    }\n\n  }\n\n  render() {\n    return (\n      <>\n        <form className='signup' onSubmit={this.handleSubmit}>\n          <label>Username or Email</label><br/>\n          <input type='text'/><br/>\n          <label>Password</label><br/>\n          <input type='password'/><br/>\n          <label>Confirm Password</label><br/>\n          <input type='password'/><br/>\n          <input type='submit'/>\n          <br/>\n          <br/>\n          <Link to='/' onClick={Nav.closeMenu}>Log In</Link>\n        </form>\n      </>\n    )\n  }\n}","/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/actions/fetchPlayer.js",[],"/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/LoadGame.jsx",[],"/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/actions/buildDeck.js",[],"/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/components/Menu.jsx",["74"],"/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/actions/updateRecord.js",[],"/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/actions/resetDealer.js",[],"/Users/jack/Dev/FlatironProjects/blackjack/blackjack-frontend/src/actions/logout.js",[],{"ruleId":"75","severity":1,"message":"76","line":29,"column":62,"nodeType":"77","messageId":"78","endLine":29,"endColumn":64},{"ruleId":"75","severity":1,"message":"76","line":68,"column":55,"nodeType":"77","messageId":"78","endLine":68,"endColumn":57},{"ruleId":"75","severity":1,"message":"76","line":183,"column":55,"nodeType":"77","messageId":"78","endLine":183,"endColumn":57},{"ruleId":"79","severity":1,"message":"80","line":246,"column":39,"nodeType":"81","messageId":"82","endLine":246,"endColumn":41},{"ruleId":"79","severity":1,"message":"80","line":246,"column":62,"nodeType":"81","messageId":"82","endLine":246,"endColumn":64},{"ruleId":"79","severity":1,"message":"80","line":248,"column":46,"nodeType":"81","messageId":"82","endLine":248,"endColumn":48},{"ruleId":"79","severity":1,"message":"80","line":248,"column":69,"nodeType":"81","messageId":"82","endLine":248,"endColumn":71},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"75","severity":1,"message":"76","line":9,"column":24,"nodeType":"77","messageId":"78","endLine":9,"endColumn":26},{"ruleId":"75","severity":1,"message":"76","line":12,"column":31,"nodeType":"77","messageId":"78","endLine":12,"endColumn":33},{"ruleId":"75","severity":1,"message":"76","line":10,"column":31,"nodeType":"77","messageId":"78","endLine":10,"endColumn":33},{"ruleId":"87","severity":1,"message":"88","line":19,"column":14,"nodeType":"89","endLine":19,"endColumn":68},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-native-reassign",["90"],"no-negated-in-lhs",["91"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]